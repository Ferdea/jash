class Directory {
    static String tooManyDirectoriesMessage;
    static String tooManyFilesMessage;

    field String name;
    field List directories;
    field List files;
    field Directory parent;

    function void init() {
        let tooManyDirectoriesMessage = "TOO MANY DIRECTORIES";
        let tooManyFilesMessage = "TOO MANY FILES";
        return;
    }

    constructor Directory new(String nameArg, Directory parentArg) {
        let name = nameArg;
        let directories = List.new(4);
        let files = List.new(4);
        let parent = parentArg;
        return this;
    }

    method void dispose() {
        var Directory directory;
        var File file;

        while (directories.getSize() > 0) {
            let directory = directories.remove();
            do directory.dispose();
        }

        while (files.getSize() > 0) {
            let file = files.remove();
            do file.dispose();
        }

        do directories.dispose();
        do files.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method String getName() {
        return name;
    }

    method int getDirectoriesCount() {
        return directories.getSize();
    }

    method Directory directoryAt(int i) {
        return directories.elementAt(i);
    }

    method int getFilesCount() {
        return files.getSize();
    }

    method File fileAt(int i) {
        return files.elementAt(i);
    }

    method void pushDirectory(Directory directory) {
        do directories.add(directory);
        return;
    }

    method void removeDirectory(int i) {
        var Directory directory;
        let directory = directories.removeAt(i);
        do directory.dispose();
        return;
    }

    method void pushFile(File file) {
        do files.add(file);
        return;
    }

    method void removeFile(int i) {
        var File file;
        let file = files.removeAt(i);
        do file.dispose();
        return;
    }

    method bool haveParent() {
        return ~(parent = null);
    }

    method Directory getParent() {
        return parent;
    }

    method String getPath() {
        var String path, directoryName;
        var int pathSize;
        var Directory directory;

        let pathSize = 0;
        let directory = this;
        while (directory.haveParent()) {
            let directoryName = directory.getName();
            let pathSize = pathSize + directoryName.length() + 1;
            let directory = directory.getParent();
        }
        let directoryName = directory.getName();
        let pathSize = pathSize + directoryName.length();

        let path = String.new(pathSize);
        return getPathRecursive(path);
    }

    method String getPathRecursive(String path) {
        if (parent = null) {
            do StringAppend.appendString(path, name);
            return path;
        }

        do parent.getPathRecursive(path);
        do path.appendChar(47);
        do StringAppend.appendString(path, name);
        return path;
    }
}