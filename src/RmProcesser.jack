class RmProcesser {
    static String rmCommand;
    static String notFoundFileOrDirectoryMessage;

    function void init() {
        let rmCommand = "RM";
        let notFoundFileOrDirectoryMessage = "FILE OR DIRECTORY NOT FOUND";
        return;
    }

    function String getName() {
        return rmCommand;
    }

    function bool isRm(ParsedCommand command) {
        if (~(StringComparer.compare(rmCommand, command.getName()))) {
            return false;
        }

        if (~(command.getArgumentsCount() = 1)) {
            do JashErrors.incorrectArgumentsCount();
            return false;
        }

        return true;
    }

    function ContentBuffer process(JashState state, String name) {
        if (RmProcesser.processFile(state, name)) {
            return ContentBuffer.new();
        }

        if (RmProcesser.processDirectory(state, name)) {
            return ContentBuffer.new();
        }

        do Output.printString(notFoundFileOrDirectoryMessage);
        do Output.println();
        return ContentBuffer.new();
    }

    function bool processDirectory(JashState state, String name) {
        var int directoryIndex;
        var Directory currentDirectory;

        let currentDirectory = state.getCurrentDirectory();
        let directoryIndex = currentDirectory.directoryByName(name);

        if (directoryIndex = -1) {
            return false;
        }

        do currentDirectory.removeDirectory(directoryIndex);

        return true;
    }

    function bool processFile(JashState state, String name) {
        var int fileIndex;
        var Directory currentDirectory;

        let currentDirectory = state.getCurrentDirectory();
        let fileIndex = currentDirectory.fileByName(name);

        if (fileIndex = -1) {
            return false;
        }

        do currentDirectory.removeFile(fileIndex);

        return true;
    }
}