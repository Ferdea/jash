class CdProcesser {
    static String cdCommand;
    static String parentDirectoryArgumentValue;
    static String rootDirectoryArgumentValue;
    static String notFoundDirectoryMessage;

    function void init() {
        let cdCommand = "CD";
        let parentDirectoryArgumentValue = "..";
        let rootDirectoryArgumentValue = "~";
        let notFoundDirectoryMessage = "DIRECTORY NOT FOUND";
        return;
    }

    function String getName() {
        return cdCommand;
    }

    function bool isCd(ParsedCommand command) {
        if (~(StringComparer.compare(cdCommand, command.getName()))) {
            return false;
        }

        if (~(command.getArgumentsCount() = 1)) {
            do JashErrors.incorrectArgumentsCount();
            return false;
        }

        return true;
    }

    function ContentBuffer process(JashState state, String directoryName) {
        var int i, count, directoryIndex;
        var Directory directory, currentDirectory;
        var bool isFound;

        if (StringComparer.compare(rootDirectoryArgumentValue, directoryName)) {
            do state.setCurrentDirectory(state.getRootDirectory());
            return ContentBuffer.new();
        }

        let currentDirectory = state.getCurrentDirectory();
        if (StringComparer.compare(parentDirectoryArgumentValue, directoryName)) {
            if (currentDirectory.haveParent()) {
                do state.setCurrentDirectory(currentDirectory.getParent());
            }

            return ContentBuffer.new();
        }

        let directoryIndex = currentDirectory.directoryByName(directoryName);
        let directory = currentDirectory.directoryAt(directoryIndex);
        do state.setCurrentDirectory(directory);

        return ContentBuffer.new();
    }
}