class LsProcesser {
    static String lsCommand;
    static String directoryEmptyMessage;

    function void init() {
        let lsCommand = "LS";
        let directoryEmptyMessage = "DIRECTORY IS EMPTY";
        return;
    }

    function String getName() {
        return lsCommand;
    }

    function bool isLs(ParsedCommand command) {
        if (~(StringComparer.compare(lsCommand, command.getName()))) { 
            return false;
        }

        if (~(command.getArgumentsCount() = 0)) {
            do JashErrors.incorrectArgumentsCount();
            return false;
        }

        return true;
    }

    function ContentBuffer process(JashState state) {
        var int i, count, allCount;
        var Directory directory, currentDirectory;
        var ContentBuffer result;
        var StringBuilder builder;
        var File file;

        let currentDirectory = state.getCurrentDirectory();
        let allCount = currentDirectory.getDirectoriesCount() + currentDirectory.getFilesCount();
        if (allCount = 0) {
            do Output.printString(directoryEmptyMessage);
            do Output.println();
            let result = ContentBuffer.new();
            return result;
        }

        let result = ContentBuffer.new();
        let builder = StringBuilder.new(4);
        let count = currentDirectory.getDirectoriesCount();
        let i = 0;
        while (i < count) {
            let directory = currentDirectory.directoryAt(i);
            do builder.addString(directory.getName());
            do builder.add(47);
            do result.add(builder.build());
            do builder.clear();
            let i = i + 1;
        }

        let count = currentDirectory.getFilesCount();
        let i = 0;
        while (i < count) {
            let file = currentDirectory.fileAt(i);
            do builder.addString(file.getName());
            do result.add(builder.build());
            do builder.clear();
            let i = i + 1;
        }

        do builder.dispose();
        return result;
    }
}