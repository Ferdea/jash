class Jash {
    static String commandReadMessage;

    field JashState state;

    function void init() {
        let commandReadMessage = " > ";
        return;
    }

    constructor Jash new() {
        let state = JashState.new();
        return this;
    }

    method void dispose() {
        do state.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void run() {
        var String command;

        while (true) {
            let command = readCommand();
            do processCommand(command);
            do command.dispose();
        }

        return;
    }

    method String readCommand() {
        var String command, path;
        var Directory currentDirectory;

        let currentDirectory = state.getCurrentDirectory();
        let path = currentDirectory.getPath();
        do Output.printString(path);
        do path.dispose();

        let command = Keyboard.readLine(commandReadMessage);

        return command;
    }

    method void processCommand(String line) {
        var ParsedCommand command;

        let command = CommandParser.parse(line);

        if (LsProcesser.isLs(command)) {
            do LsProcesser.process(state);
            return;
        }
        if (MkdirProcesser.isMkdir(command)) {
            do MkdirProcesser.process(state, command.argumentAt(0));
            return;
        }
        if (CdProcesser.isCd(command)) {
            do CdProcesser.process(state, command.argumentAt(0));
            return;
        }
        if (RmProcesser.isRm(command)) {
            do RmProcesser.process(state, command.argumentAt(0));
            return;
        }
        if (TouchProcesser.isTouch(command)) {
            do TouchProcesser.process(state, command.argumentAt(0));
            return;
        }
        if (ClearProcesser.isClear(command)) {
            do ClearProcesser.process();
            return;
        }
        if (CatProcesser.isCat(command)) {
            do CatProcesser.process(state, command.argumentAt(0));
            return;
        }
        if (EchoProcesser.isEcho(command)) {
            do EchoProcesser.process(command.argumentAt(0));
            return;
        }

        do JashErrors.incorrectCommand();
        return;
    }
}