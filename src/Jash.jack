class Jash {
    static String commandReadMessage;
    static String emptyCommandMessage;

    field JashState state;

    function void init() {
        let commandReadMessage = " > ";
        let emptyCommandMessage = "EMPTY COMMAND";
        return;
    }

    constructor Jash new() {
        let state = JashState.new();
        return this;
    }

    method void dispose() {
        do state.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void run() {
        var String line, outputFile;
        var ParsedLine parsedLine;
        var ParsedCommand command;
        var ContentBuffer content;
        var int i, commandsCount, fileIndex;
        var bool isError;
        var File file;
        var Directory currentDirectory;

        while (true) {
            let line = readCommand();

            if (line.length() = 0) {
                do Output.printString(emptyCommandMessage);
            } else {
                let parsedLine = CommandParser.parse(line);
                do line.dispose();

                let commandsCount = parsedLine.getCommandsCount();
                let i = 0;
                let isError = false;
                while ((~(isError)) & (i < commandsCount)) {
                    let command = parsedLine.commandAt(i);
                    let content = processCommand(command);

                    if (i > 0) {
                        let currentDirectory = state.getCurrentDirectory();
                        let fileIndex = currentDirectory.fileByName(StringCopy.copy(CommandParser.getPipeBufferName()));
                        do currentDirectory.removeFile(fileIndex);
                    }

                    if (content = null) {
                        do JashErrors.incorrectCommand();
                        let isError = true;
                    } else { 
                        if ((i + 1) < commandsCount) {
                            let currentDirectory = state.getCurrentDirectory();
                            let file = File.new(StringCopy.copy(CommandParser.getPipeBufferName()), currentDirectory);
                            do file.storeFromBuffer(content);
                            do content.dispose();
                            do currentDirectory.pushFile(file);
                        }
                    }
                    let i = i + 1;
                }

                if (~isError) {
                    let outputFile = parsedLine.getOutputFile();
                    if (outputFile = null) {
                        do printContent(content);
                    } else {
                        let currentDirectory = state.getCurrentDirectory();
                        let fileIndex = currentDirectory.fileByName(outputFile);

                        if (fileIndex = -1) {
                            let file = File.new(outputFile, currentDirectory);
                            do currentDirectory.pushFile(file);
                        } else {
                            let file = currentDirectory.fileAt(fileIndex);
                        }
                        
                        do file.storeFromBuffer(content);
                    }
                    do content.dispose();
                }
            }
        }

        return;
    }

    method String readCommand() {
        var String command, path;
        var Directory currentDirectory;

        let currentDirectory = state.getCurrentDirectory();
        let path = currentDirectory.getPath();
        do Output.printString(path);
        do path.dispose();

        let command = Keyboard.readLine(commandReadMessage);

        return command;
    }

    method ContentBuffer processCommand(ParsedCommand command) {
        if (LsProcesser.isLs(command)) {
            return LsProcesser.process(state);
        }
        if (MkdirProcesser.isMkdir(command)) {
            return MkdirProcesser.process(state, command.argumentAt(0));
        }
        if (CdProcesser.isCd(command)) {
            return CdProcesser.process(state, command.argumentAt(0));
        }
        if (RmProcesser.isRm(command)) {
            return RmProcesser.process(state, command.argumentAt(0));
        }
        if (TouchProcesser.isTouch(command)) {
            return TouchProcesser.process(state, command.argumentAt(0));
        }
        if (ClearProcesser.isClear(command)) {
            return ClearProcesser.process();
        }
        if (CatProcesser.isCat(command)) {
            return CatProcesser.process(state, command.argumentAt(0));
        }
        if (EchoProcesser.isEcho(command)) {
            return EchoProcesser.process(command.argumentAt(0));
        }
        if (WcProcesser.isWc(command)) {
            return WcProcesser.process(state, command.argumentAt(0));
        }
        if (ExitProcesser.isExit(command)) {
            return ExitProcesser.process();
        }
        if (HeadProcesser.isHead(command)) {
            return HeadProcesser.process(state, command.argumentAt(0), command.argumentAt(1));
        }
        if (TailProcesser.isTail(command)) {
            return TailProcesser.process(state, command.argumentAt(0), command.argumentAt(1));
        }
        if (GrepProcesser.isGrep(command)) {
            return GrepProcesser.process(state, command.argumentAt(0), command.argumentAt(1));
        }

        return null;
    }

    method void printContent(ContentBuffer content) {
        var String line;
        var int i;

        let i = 0;
        while (i < content.getSize()) {
            let line = content.lineAt(i);
            do Output.printString(line);
            do Output.println();
            let i = i + 1;
        }

        return;
    }
}